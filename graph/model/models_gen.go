// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AdminAuthPayload struct {
	Token string `json:"token"`
}

type Agent struct {
	ID         string    `json:"id"`
	Name       string    `json:"name"`
	Phone      string    `json:"phone"`
	CreatedAt  time.Time `json:"createdAt"`
	Address    string    `json:"address"`
	NationalID string    `json:"NationalId"`
	Email      string    `json:"email"`
}

type AgentAuthPayload struct {
	Token string `json:"token"`
}

type ApplyLoanInput struct {
	Token               string    `json:"token"`
	Amount              int       `json:"amount"`
	Reason              string    `json:"reason"`
	ExpectedPaymentDate time.Time `json:"expectedPaymentDate"`
}

type Detail struct {
	Description string `json:"description"`
	Answer      string `json:"answer"`
}

type Faq struct {
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

type FetchKycInput struct {
	Token string `json:"token"`
}

type KycChoice struct {
	ChoiceName  string `json:"choiceName"`
	ChoiceScore int    `json:"choiceScore"`
}

type KycDetails struct {
	Token   string    `json:"token"`
	Details []*Detail `json:"details"`
}

type KycQuestion struct {
	QuestionText  string       `json:"questionText"`
	Choices       []*KycChoice `json:"choices"`
	QuestionScore int          `json:"questionScore"`
}

type Loan struct {
	LoanID            string         `json:"loanId"`
	UserID            string         `json:"userId"`
	UserName          string         `json:"userName"`
	Amount            int            `json:"amount"`
	PhoneNumber       string         `json:"phoneNumber"`
	PaidAmount        int            `json:"paidAmount"`
	LoanDate          time.Time      `json:"loanDate"`
	ExpectedPayAmount int            `json:"expectedPayAmount"`
	ExpectedPayDate   time.Time      `json:"expectedPayDate"`
	Status            LoanStatus     `json:"status"`
	CompletedDate     time.Time      `json:"completedDate"`
	Payments          []*LoanPayment `json:"payments"`
}

type LoanPayment struct {
	PaymentID            string     `json:"paymentId"`
	LoanID               string     `json:"loanId"`
	PaidAmount           int        `json:"paidAmount"`
	AmountLeft           int        `json:"amountLeft"`
	PaidDate             time.Time  `json:"paidDate"`
	Status               LoanStatus `json:"status"`
	TransactionReference string     `json:"transactionReference"`
}

type LoanPaymentInput struct {
	LoanID         string `json:"loanId"`
	Token          string `json:"token"`
	PayAmount      int    `json:"payAmount"`
	TransactionRef string `json:"transactionRef"`
}

type LoansInput struct {
	Page   int        `json:"page"`
	Status LoanStatus `json:"status"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type PaginationInput struct {
	Page int `json:"page"`
}

type PinLoginInput struct {
	Token string `json:"token"`
	Pin   int    `json:"pin"`
}

type RegisterAgentInput struct {
	Name       string `json:"name"`
	NationalID string `json:"NationalId"`
	Address    string `json:"address"`
	Email      string `json:"email"`
	Phone      string `json:"phone"`
	Password   string `json:"password"`
	Token      string `json:"token"`
}

type RegistertionPayload struct {
	Token string `json:"token"`
}

type SetPinInput struct {
	Token string `json:"token"`
	Pin   int    `json:"pin"`
}

type User struct {
	UserID          string         `json:"userID"`
	Name            string         `json:"name"`
	CreatedAt       time.Time      `json:"createdAt"`
	Email           string         `json:"email"`
	Phone           string         `json:"phone"`
	HasPin          bool           `json:"hasPin"`
	LoanLimit       int            `json:"loanLimit"`
	TotalLoan       int            `json:"totalLoan"`
	TotalPaid       int            `json:"totalPaid"`
	TimesLoaned     int            `json:"timesLoaned"`
	CreditScore     int            `json:"creditScore"`
	HasCompletedKyc bool           `json:"hasCompletedKYC"`
	HasSubmittedKyc bool           `json:"hasSubmittedKYC"`
	ProfilePhotoURL string         `json:"profilePhotoURL"`
	FrontIDPhotoURL string         `json:"frontIDPhotoURL"`
	Loans           []*Loan        `json:"loans"`
	Kycdetails      []*UserDetails `json:"kycdetails"`
}

type UserDetails struct {
	Description string `json:"description"`
	Answer      string `json:"answer"`
}

type UserLoginInput struct {
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

type UserRegisterInput struct {
	Name            string `json:"name"`
	Phone           string `json:"phone"`
	Password        string `json:"password"`
	Email           string `json:"email"`
	ConfirmPassword string `json:"confirmPassword"`
}

type VerificationInput struct {
	UserID string `json:"userId"`
	Otp    string `json:"otp"`
}

type VerifyKycInput struct {
	Token  string `json:"token"`
	UserID string `json:"userId"`
}

type ApproveLoanInput struct {
	Token          string `json:"token"`
	LoanID         string `json:"loanId"`
	TransactionRef string `json:"transactionRef"`
}

type ChangePasswordInput struct {
	Token           string `json:"token"`
	OldPassword     string `json:"oldPassword"`
	NewPassword     string `json:"newPassword"`
	ConfirmPassword string `json:"confirmPassword"`
}

type ChangePinInput struct {
	Token    string `json:"token"`
	Password string `json:"password"`
	NewPin   int    `json:"newPin"`
}

type FetchAgentInput struct {
	ID    string `json:"id"`
	Token string `json:"token"`
}

type FetchLoanInput struct {
	LoanID string `json:"loanId"`
	Token  string `json:"token"`
}

type FetchUserInput struct {
	UserID string `json:"userId"`
	Token  string `json:"token"`
}

type FetchUserLoansInput struct {
	Token  string     `json:"token"`
	UserID string     `json:"userId"`
	Page   int        `json:"page"`
	Status LoanStatus `json:"status"`
}

type RejectLoanInput struct {
	Token  string `json:"token"`
	LoanID string `json:"loanId"`
}

type LoanStatus string

const (
	LoanStatusCreated   LoanStatus = "created"
	LoanStatusCurrent   LoanStatus = "current"
	LoanStatusDeclined  LoanStatus = "declined"
	LoanStatusCompleted LoanStatus = "completed"
	LoanStatusOverdue   LoanStatus = "overdue"
)

var AllLoanStatus = []LoanStatus{
	LoanStatusCreated,
	LoanStatusCurrent,
	LoanStatusDeclined,
	LoanStatusCompleted,
	LoanStatusOverdue,
}

func (e LoanStatus) IsValid() bool {
	switch e {
	case LoanStatusCreated, LoanStatusCurrent, LoanStatusDeclined, LoanStatusCompleted, LoanStatusOverdue:
		return true
	}
	return false
}

func (e LoanStatus) String() string {
	return string(e)
}

func (e *LoanStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoanStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoanStatus", str)
	}
	return nil
}

func (e LoanStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
